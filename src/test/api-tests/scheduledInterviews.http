### Create Storyteler
POST {{host}}/api/v1/storytellers/
Content-Type: application/json
Authorization: Bearer {{JWT}}


{
  "firstname": "Chris",
  "lastname": "Dufresne",
  "contactMethod": "phone",
  "preferredTimes": [{"time": "15:01:00", "dayOfWeek": "SATURDAY"}]
}
> {% client.global.set("sid", response.body) %}


### Create Question 1
POST {{host}}/api/v1/questions/
Content-Type: application/json
Authorization: Bearer {{JWT}}


{
  "name": "Question 2",
  "text": "What is your favorite color?",
  "isCustom": true
}
> {% client.global.set("qid", response.body) %}

### Create Chronicler
POST {{host}}/api/v1/chroniclers/c1
Content-Type: application/json
Authorization: Bearer {{JWT}}

{
  "firstname": "Chat",
  "lastname": "GPT2.0",
  "isAi" : true
}
> {% client.global.set("cid", response.body) %}

### Post Interview 1
POST {{host}}/api/v1/interviews/storytellers/{{sid}}/chroniclers/{{cid}}
Content-Type: application/json
Authorization: Bearer {{JWT}}

{
  "name": "Interview 3",
  "interviewQuestions": [
    {
      "id": "{{qid}}"
    }
  ]
}
> {% client.global.set("id", response.body) %}

###Schedule an interview use preferred time and no append
POST {{host}}/api/v1/interviews/storytellers/{{sid}}/scheduled/{{id}}?name=noAppend
Authorization: Bearer {{JWT}}


> {%
    client.global.set("siid1", response.body)
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body !== null)
    });

    client.test("Response content-type is json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

###Schedule an interview w/time
POST {{host}}/api/v1/interviews/storytellers/{{sid}}/scheduled/{{id}}?time=2030-06-14T12%3A34%3A00Z&name=scheduled
Authorization: Bearer {{JWT}}


> {%
    client.global.set("siid2", response.body)
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body !== null)
    });

    client.test("Response content-type is json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

###Schedule an interview use preferred time and no append should error
POST {{host}}/api/v1/interviews/storytellers/{{sid}}/scheduled/{{id}}?name=shouldError
Authorization: Bearer {{JWT}}


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 409, "Response status is not 409");
        client.assert(response.body !== null)
    });

    client.test("Response content-type is json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

###Schedule an interview with scheduled time and append should error
POST {{host}}/api/v1/interviews/storytellers/{{sid}}/scheduled/{{id}}?time=2030-06-17T12%3A34%3A00Z&append=true&name=shouldError
Authorization: Bearer {{JWT}}


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body !== null)
    });

    client.test("Response content-type is json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

###Schedule an interview use preferred time and append
POST {{host}}/api/v1/interviews/storytellers/{{sid}}/scheduled/{{id}}?append=true&name=appended2
Authorization: Bearer {{JWT}}


> {%
    client.global.set("siid3", response.body)
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body !== null)
    });

    client.test("Response content-type is json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

### GET All Scheduled Interview should be three TODO Pipe to JS test
GET {{host}}/api/v1/interviews/storytellers/self/scheduled:all
Authorization: Bearer {{JWT}}


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body !== null)
        client.assert(response.body.json !== null)
    });

    client.test("Response content-type is json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

### GET Next Scheduled Interview
GET {{host}}/api/v1/interviews/storytellers/{{sid}}/scheduled:next
Authorization: Bearer {{JWT}}


### Delete Scheduled Interview 1
DELETE {{host}}/api/v1/interviews/scheduled/{{siid1}}
Authorization: Bearer {{JWT}}


### Delete Scheduled Interview 2
DELETE {{host}}/api/v1/interviews/scheduled/{{siid2}}
Authorization: Bearer {{JWT}}


### Delete Scheduled Interview 3
DELETE {{host}}/api/v1/interviews/scheduled/{{siid3}}
Authorization: Bearer {{JWT}}


### Delete Question
DELETE {{host}}/api/v1/questions/{{qid}}
Authorization: Bearer {{JWT}}


### Delete Interview
DELETE {{host}}/api/v1/interviews/{{id}}
Authorization: Bearer {{JWT}}


### Delete Storyteller
DELETE {{host}}/api/v1/storytellers/{{sid}}
Authorization: Bearer {{JWT}}
